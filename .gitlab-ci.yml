# Define a imagem Docker padrão para todos os jobs da pipeline
default:
  image: golang:1.24-alpine

# Define os estágios da pipeline. Os jobs são executados na ordem dos estágios.
stages:
  - build-lint
  - test
  - release
  - deploy
  - cleanup

variables:
  DOCKER_USER: felipeomelodev
  DOCKER_PASS: $DOCKER_PASS
  DOCKER_IMAGE_NAME: $DOCKER_USER/ms-saudacoes-aleatorias
  DOCKER_REGISTRY: registry.hub.docker.com
  DOCKER_IMAGE_TAG: 1.0.$CI_PIPELINE_IID
  SERVICE_NAME: saudacoes-aleatorias
  KOYEB_TOKEN: $KOYEB_TOKEN

# Job para verificar formatação e erros comuns no código Go
lint-code:
  stage: build-lint
  script:
    - echo "Linting code..."
    - go fmt $(go list ./...)
    - go vet $(go list ./...)
  rules:
    - if: $CI_COMMIT_BRANCH != "main"
      when: always

golangci-lint:
  stage: build-lint
  # Usa a imagem oficial do golangci-lint.
  image: golangci/golangci-lint:v2.2-alpine
  script:
    - echo "Executando linter no código..."
    # Executa o linter. O cache é limpo para garantir uma verificação completa.
    - golangci-lint run --verbose
  rules:
    - if: $CI_COMMIT_BRANCH != "main"
      when: always

run-tests:
  stage: test
  script:
    - echo "Rodando testes e gerando report..."
    - apk add --no-cache build-base gcc
    - go install gotest.tools/gotestsum@latest
    - CGO_ENABLED=1 gotestsum --junitfile report.xml --format testname
  artifacts:
    when: always
    reports:
      junit: report.xml
  rules:
    - if: $CI_COMMIT_BRANCH != "main"
      when: always

# Job para construir a imagem Docker e enviá-la para o Docker Hub
build-and-push-image:
  stage: release
  tags:
    - gitlab-org-docker # Certifique-se que este runner suporta modo privilegiado
  # É recomendado usar uma imagem mais recente, se possível, para ter as últimas versões do buildx
  image: docker:25.0
  services:
    - name: docker:25.0-dind
      command: ["--experimental"] # Necessário para buildx em algumas configurações
  variables:
    # Habilita o driver overlay2 para o dind, geralmente mais estável
    DOCKER_DRIVER: overlay2
    # Desativa o TLS, pois estamos nos conectando ao dind no mesmo host
    DOCKER_TLS_CERTDIR: ""
    # Define as plataformas alvo
    PLATFORMS: "linux/amd64,linux/arm64"
    CACHE_DIR: ".buildx-cache"
  before_script:
    # 1. Login no Docker Hub
    - echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
    
    # 2. Habilita a emulação de outras arquiteturas via QEMU
    # O buildx usará o QEMU para construir a imagem ARM em um runner AMD64
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    
    # 3. Cria e utiliza um novo builder buildx
    # Isso cria uma instância de builder que pode lidar com múltiplas plataformas
    - docker buildx create --use --name multi-platform-builder
    - docker buildx inspect --bootstrap

  script:
    - echo "Construindo e enviando a imagem multi-plataforma..."
    - mkdir -p "$CACHE_DIR"
    - docker buildx build --platform "$PLATFORMS" --cache-from "type=local,src=$CACHE_DIR" --cache-to "type=local,dest=$CACHE_DIR,mode=max" --tag "$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG" --tag "$DOCKER_IMAGE_NAME:latest" --push .

  only:
    - main

deploy-to-staging:
  stage: deploy
  image:
    name: hashicorp/terraform:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  variables:
    TF_VAR_docker_image_name: $DOCKER_IMAGE_NAME
    TF_VAR_docker_image_tag: $DOCKER_IMAGE_TAG
  before_script:
    - export KOYEB_TOKEN=$KOYEB_TOKEN
    - cd infra
    - terraform init
    - terraform validate
  script:
    - terraform apply -auto-approve
  artifacts: 
    paths:
      - infra/
    expire_in: 1 day
  only:
    - main

destroy-staging:
  stage: cleanup
  image:
    name: hashicorp/terraform:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - export KOYEB_TOKEN=$KOYEB_TOKEN
    - cd infra
    - terraform init
  script:
    - echo "Destruindo a infraestrutura de staging..."
    - terraform destroy -auto-approve
  when: manual
  dependencies:
    - deploy-to-staging
  only:
    - main
  
