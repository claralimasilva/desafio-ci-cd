# Define a imagem Docker padrão para todos os jobs da pipeline
default:
  image: golang:1.24-alpine

# Define os estágios da pipeline. Os jobs são executados na ordem dos estágios.
stages:
  - build-lint
  - test
  - release
  - deploy

variables:
  DOCKER_USER: taotreinatec
  DOCKER_PASS: $DOCKER_PASS
  DOCKER_IMAGE_NAME: $DOCKER_USER/ms-saudacoes-aleatorias
  DOCKER_REGISTRY: registry.hub.docker.com
  DOCKER_IMAGE_TAG: 1.0.$CI_PIPELINE_IID
  RENDER_OWNER_ID: $RENDER_OWNER_ID
  RENDER_API_KEY: $RENDER_API_KEY
  SERVICE_NAME: saudacoes-aleatorias
  COOLIFY_TOKEN: $COOLIFY_TOKEN

# Job para verificar formatação e erros comuns no código Go
lint-code:
  stage: build-lint
  script:
    - echo "Linting code..."
    - go fmt $(go list ./...)
    - go vet $(go list ./...)
  rules:
    - if: $CI_COMMIT_BRANCH != "main"
      when: always

golangci-lint:
  stage: build-lint
  # Usa a imagem oficial do golangci-lint.
  image: golangci/golangci-lint:v2.2-alpine
  script:
    - echo "Executando linter no código..."
    # Executa o linter. O cache é limpo para garantir uma verificação completa.
    - golangci-lint run --verbose
  rules:
    - if: $CI_COMMIT_BRANCH != "main"
      when: always

run-tests:
  stage: test
  script:
    - echo "Rodando testes e gerando report..."
    - apk add --no-cache build-base gcc
    - go install gotest.tools/gotestsum@latest
    - CGO_ENABLED=1 gotestsum --junitfile report.xml --format testname
  artifacts:
    when: always
    reports:
      junit: report.xml
  rules:
    - if: $CI_COMMIT_BRANCH != "main"
      when: always

# Job para construir a imagem Docker e enviá-la para o Docker Hub
build-and-push-image:
  stage: release
  tags:
    - gitlab-org-docker
  # Usa a imagem oficial do Docker para executar comandos docker
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
  script:
    - echo "Construindo a imagem Docker..."
    # Constrói a imagem Docker usando o Dockerfile da aplicação.
    - docker build -t "$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG" .
    - echo "Enviando a imagem para o Docker Hub..."
    # Envia a imagem construída para o repositório do Docker Hub.
    - docker tag "$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG" "$DOCKER_IMAGE_NAME:latest"
    - docker push "$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG"
    - docker push "$DOCKER_IMAGE_NAME:latest"
  only:
    - main

# Job para acionar o deploy no Render
deploy-to-staging:
  stage: deploy
  image:
    name: hashicorp/terraform:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  variables:
    TF_VAR_docker_image_name: $DOCKER_IMAGE_NAME
    TF_VAR_docker_image_tag: $DOCKER_IMAGE_TAG
    TF_VAR_coolify_token: $COOLIFY_TOKEN
  before_script:
    - cd infra
    - terraform init
    - terraform validate
  script:
    - terraform apply -auto-approve
  only:
    - main
