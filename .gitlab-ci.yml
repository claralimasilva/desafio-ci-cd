# Define a imagem Docker padrÃ£o para todos os jobs da pipeline
default:
  image: golang:1.24-alpine

# Define os estÃ¡gios da pipeline. Os jobs sÃ£o executados na ordem dos estÃ¡gios.
stages:
  - build-lint
  - test
  - release
  - deploy

variables:
  DOCKER_USER: taotreinatec
  DOCKER_PASS: $DOCKER_PASS
  DOCKER_IMAGE_NAME: $DOCKER_USER/ms-saudacoes-aleatorias
  DOCKER_REGISTRY: registry.hub.docker.com
  DOCKER_IMAGE_TAG: 1.0.$CI_PIPELINE_IID
  RENDER_OWNER_ID: $RENDER_OWNER_ID
  RENDER_API_KEY: $RENDER_API_KEY
  SERVICE_NAME: saudacoes-aleatorias

# Job para verificar formataÃ§Ã£o e erros comuns no cÃ³digo Go
lint-code:
  stage: build-lint
  script:
    - echo "Linting code..."
    - go fmt $(go list ./...)
    - go vet $(go list ./...)

golangci-lint:
  stage: build-lint
  # Usa a imagem oficial do golangci-lint.
  image: golangci/golangci-lint:v2.2-alpine
  script:
    - echo "Executando linter no cÃ³digo..."
    # Executa o linter. O cache Ã© limpo para garantir uma verificaÃ§Ã£o completa.
    - golangci-lint run --verbose

run-tests:
  stage: test
  script:
    - echo "Rodando testes e gerando report..."
    - apk add --no-cache build-base gcc
    - go install gotest.tools/gotestsum@latest
    - CGO_ENABLED=1 gotestsum --junitfile report.xml --format testname
  artifacts:
    when: always
    reports:
      junit: report.xml

# Job para construir a imagem Docker e enviÃ¡-la para o Docker Hub
build-and-push-image:
  stage: release
  tags:
    - gitlab-org-docker
  # Usa a imagem oficial do Docker para executar comandos docker
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
  script:
    - echo "Construindo a imagem Docker..."
    # ConstrÃ³i a imagem Docker usando o Dockerfile da aplicaÃ§Ã£o.
    - docker build -t "$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG" .
    - echo "Enviando a imagem para o Docker Hub..."
    # Envia a imagem construÃ­da para o repositÃ³rio do Docker Hub.
    - docker tag "$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG" "$DOCKER_IMAGE_NAME:latest"
    - docker push "$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG"
    - docker push "$DOCKER_IMAGE_NAME:latest"
  only:
    - main

# Job para acionar o deploy no Render
deploy-to-render:
  stage: deploy
  # Usa uma imagem mÃ­nima que jÃ¡ contÃ©m o curl
  image: curlimages/curl:latest
  script:
    - echo "ðŸš€ Acionando deploy no Render.com..."
    # A URL do Deploy Hook do Render tem o formato:
    # https://api.render.com/v1/services/{service_id}/deploys
    # O service_id Ã© composto por 'srv-' + RENDER_OWNER_ID + '-' + SERVICE_NAME + '-{hash}'
    # Mas a API do Render permite usar a URL abaixo com o seu API Key.
    - >
      curl -X POST \
      --header "Authorization: Bearer $RENDER_API_KEY" \
      --header "Content-Type: application/json" \
      --header "Accept: application/json" \
      "https://api.render.com/v1/services?name=$SERVICE_NAME"
  only:
    - main
